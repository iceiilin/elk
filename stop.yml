---
- hosts: esxi_server
  vars_files:
    - vars/stop.yml

  tasks:
    - name: stop esxtop script
      command: ./kill_pid_esxi.sh esxtop
      args:
          chdir: "{{ esxi_remote_path }}"
      ignore_errors: yes
      when: esxtop

    - name: copy back esxtop logstash file
      fetch:
          src={{ esxi_remote_path }}/esxtop.logstash
          dest={{ esxi_logstash }}
          flat=yes
      ignore_errors: yes
      when: esxtop

    - name: copy back esxtop kibana configure file
      fetch:
          src={{ esxi_remote_path }}/esxtop.kibana
          dest={{ esxi_kibana }}
          flat=yes
      ignore_errors: yes
      when: esxtop

    - name: copy back esxtop csv file
      fetch:
          src={{ esxi_remote_path }}/rackhd_esxtop.csv
          dest={{ esxi_log }}
          flat=yes
      ignore_errors: yes
      when: esxtop

- hosts: rackhd
  vars_files:
    - vars/stop.yml

  tasks:
    - name: get rackhd ubuntu version
      shell: lsb_release -a | grep Release | awk '{print $2}' | awk -F '.' '{print $1}'
      register: release
      #ignore_errors: yes
      become: True
      when: rackhdlog

    - name: pack RackHD log files
      shell: tar zcvf upstart.tar.gz upstart/
      args:
          chdir: "{{ rackhdlog_remote_path }}"
      become: yes
      when: rackhdlog and (release.stdout == "14")

    - name: pack RackHD log files
      shell: tar zcvf upstart.tar.gz rackhd/
      args:
          chdir: "{{ rackhdlog_remote_path }}"
      become: yes
      when: rackhdlog and (release.stdout == "16")

    - name: copy RackHD log files
      fetch:
          src={{ rackhdlog_remote_path }}/upstart.tar.gz
          dest={{ rackhdlog_log }}
          flat=yes
          mode=777
      when: rackhdlog

- hosts: test_machine
  vars_files:
    - vars/stop.yml

  tasks:
    ## Prepare benchmark logs and logstash configure file
    - name: stop benchmark
      shell:
          virtualenv .venv; source .venv/bin/activate;python benchmark.py --stop
      args:
          chdir: "{{ benchmark_tool_path }}"
          executable: /bin/bash
      ignore_errors: yes
      when: benchmark

    ## Prepare RackHD logs
    - name: unpack rackhd log from .tar.gz packages
      shell: tar zxvf upstart.tar.gz; rm upstart.tar.gz
      register: unpack_flag
      args:
          chdir: "{{ inventory_dir }}/logs"
      ignore_errors: yes
      when: rackhdlog

    ## Copy ELK config files into corresponding tool
    - name: copy benchmark logstash file to correct place
      fetch:
          src={{ benchmark_script_path }}benchmark.logstash
          dest={{ logstash_config_path }}benchmark.logstash
          flat=yes
      when: benchmark

    - name: copy benchmark kibana file to correct place
      fetch:
          src={{ benchmark_script_path }}benchmark.kibana
          dest={{ kibana_config_path }}benchmark.kibana
          flat=yes
      when: benchmark

    - name: copy rackhdlog logstash file to correct place
      fetch:
          src={{ inventory_dir }}/files/rackhdlog/rackhdlog.logstash
          dest={{ logstash_config_path }}rackhdlog.logstash
          flat=yes
      when: rackhdlog

    - name: kill previous logstash processes
      shell: "{{ inventory_dir }}/files/kill_pid_linux.sh logstash"
      become: yes

    - name: initiate logstash
      shell: ./bin/logstash -f config/{{ item }}.logstash > {{ item }}.log &
      #shell: ./bin/logstash -f config/ > logstash.log &
      args:
          chdir: "{{ inventory_dir }}/elk/logstash"
      with_items: ["benchmark", "rackhdlog", "esxtop"]

    #- pause: seconds=15
    ## Configure kibana
    - name: Configure kibana
      command: python {{ inventory_dir }}/files/set_kibana_config.py -t {{ timestamp }}
      register: result
      args:
          chdir: "{{ inventory_dir }}"
      #ignore_errors: yes
      become: yes
      until: result.rc == 0
      retries: 5
      delay: 15
