---
- hosts: test_machine

  tasks:
    - name: kill previous logstash processes
      shell: "{{ inventory_dir }}/files/kill_pid_linux.sh logstash"
      become: yes

    - name: remove previous data logs
      shell: rm -rf {{ data_log_path }}/*; rm {{ logstash_conf_path }}/*.logstash; rm -rf {{ kibana_conf_path }}/*.kibana

- hosts: esxi_server

  tasks:
    - name: stop esxtop script
      command: "{{ esxtop_exec_path }}/kill_pid_esxi.sh esxtop"
      ignore_errors: yes
      when: esxtop

    - name: find esxtop elk config file
      shell: ls {{ item.path }}
      with_items:
          "{{ elk_conf_info.esxtop.src }}"
      register: fetch_file
      when: esxtop

    - name: copy back esxtop elk config file
      fetch:
          src={{ fetch_file.results[item.index].stdout }}
          dest={{ item.path }}
          flat=yes
          fail_on_missing=yes
      with_items:
          - "{{ elk_conf_info.esxtop.dst }}"
      when: esxtop

- hosts: rackhd

  tasks:
    - name: get rackhd ubuntu version
      shell: lsb_release -a | grep Release | awk '{print $2}' | awk -F '.' '{print $1}'
      register: release
      become: True

    - name: pack RackHD log files
      shell: tar zcvf upstart.tar.gz upstart/
      args:
          chdir: "{{ rackhdlog_exec_path }}"
      become: yes
      when: rackhdlog and (release.stdout == "14")

    - name: pack RackHD log files
      shell: tar zcvf upstart.tar.gz rackhd/
      args:
          chdir: "{{ rackhdlog_exec_path }}"
      become: yes
      when: rackhdlog and (release.stdout == "16")

    - name: copy RackHD log files
      fetch:
          src={{ rackhdlog_exec_path }}/upstart.tar.gz
          dest={{ data_log_path }}
          flat=yes
          mode=777
      when: rackhdlog

- hosts: test_machine

  tasks:
    ## Prepare benchmark logs and logstash configure file
    - name: stop benchmark
      shell:
          virtualenv .venv; source .venv/bin/activate;python benchmark.py --stop
      args:
          chdir: "{{ benchmark_exec_path }}"
          executable: /bin/bash
      ignore_errors: yes
      when: benchmark

    ## Prepare RackHD logs
    - name: unpack rackhd log from .tar.gz packages
      shell: tar zxvf upstart.tar.gz; rm upstart.tar.gz
      register: unpack_flag
      args:
          chdir: "{{ data_log_path }}"
      ignore_errors: yes
      when: rackhdlog

    ## Copy ELK config files into corresponding tool
    - name: find benchmark and rackhdlog elk config file
      shell: ls {{ item.path }}
      with_items:
          "{{ elk_conf_info.test_machine.src }}"
      when: item.flag
      register: fetch_file

    - name: copy back benchmark and rackhdlog elk config file
      copy:
          src={{ fetch_file.results[item.index].stdout }}
          dest={{ item.path }}
      with_items:
          - "{{ elk_conf_info.test_machine.dst }}"
      when: item.flag

    - name: find logstash config file
      shell: ls *.logstash
      args:
          chdir: "{{ logstash_conf_path }}"
      register: conf_file

    - name: initiate logstash
      shell: ./bin/logstash -f {{ logstash_conf_path }}/{{ item }} >> logs/{{ item }}.log &
      args:
          chdir: "{{ elk_path }}/logstash"
      with_items:
          "{{ conf_file.stdout_lines }}"

    ## Configure kibana
    - name: Configure kibana
      command: python {{ inventory_dir }}/files/set_kibana_config.py
      register: result
      args:
          chdir: "{{ inventory_dir }}"
      become: yes
      until: result.rc == 0
      retries: 5
      delay: 15
