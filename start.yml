---
- hosts: test_machine

  tasks:
    - name: get current timestamp as the index name
      shell: date +%Y%m%d_%H%M%S
      register: timestamp

    - name: write timestamp into variable file
      replace:
          "dest={{ inventory_dir }}/group_vars/elk.yml
          regexp='timestamp.*$'
          replace='timestamp: '{{ timestamp.stdout }}''"

    - name: Remove previous config file for rackhdlog
      shell: rm {{ rackhdlog_elk_script_path }}/*.logstash; rm {{ rackhdlog_elk_script_path }}/*.kibana
      ignore_errors: yes
      when: rackhdlog

    - name: generate logstash file for rackhdlog
      shell: ./generate_rackhdlog_elkconf.sh -p {{ data_log_path }}/rackhd -t {{ timestamp.stdout }}
      args:
          chdir: "{{ rackhdlog_elk_script_path }}"
      when: rackhdlog

- hosts: esxi_server

  tasks:
    - name: Remove previous config and log file
      shell: rm -rf {{ esxtop_exec_path }}
      ignore_errors: yes
      when: esxtop

    - name: Copy scripts from test machine
      copy: src={{ esxtop_elk_script_path }}
            dest=/
            mode=0744
      when: esxtop

    - name: Get suffix of the log name
      shell: echo _`echo {{ inventory_hostname }} | awk -F "." '{print $4}'`_{{ hostvars['localhost']['timestamp']['stdout'] }}
      register: file_suffix
      when: esxtop

    - debug: msg={{ file_suffix.stdout }}
      when: esxtop

    - name: start esxtop script
      command: "{{ esxtop_exec_path }}/esxtop_csv_collector.py -n {{ esxtop_count }} -d {{ esxtop_delay }} --logpath {{ data_log_path }} --suffix {{ file_suffix.stdout }} "
      register: collect_job
      async: "{{ esxtop_count*esxtop_delay+10|int }}"
      poll: 0
      when: esxtop

- hosts: test_machine

  tasks:
    - name: start benchmark
      shell: virtualenv .venv; source .venv/bin/activate;pip install -r requirements.txt;python benchmark.py --start
      args:
          chdir: "{{ benchmark_exec_path }}"
          executable: /bin/bash
      ignore_errors: yes
      become: False
      when: benchmark

    - name: get latest benchmark log file
      shell:
          virtualenv .venv > /dev/null; source .venv/bin/activate > /dev/null;python benchmark.py --getdir
      register: benchmark_log_path
      args:
          chdir: "{{ benchmark_exec_path }}"
          executable: /bin/bash
      when: benchmark

    - name: Remove previous config and log file
      shell: rm {{ benchmark_elk_script_path }}/*.logstash; rm {{ benchmark_elk_script_path }}/*.kibana
      ignore_errors: yes
      when: benchmark

    - name: generate elk config files for benchmark
      shell: ./generate_benchmark_elkconf.sh -p {{ benchmark_log_path.stdout }}/data -t {{ timestamp.stdout }}
      args:
          chdir: "{{ benchmark_elk_script_path }}"
      when: benchmark
